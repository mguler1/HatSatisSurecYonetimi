// <auto-generated />
using System;
using DataAccess.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230504111440_addtable")]
    partial class addtable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entity.Concrete.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "f305e76e-2a4f-4045-ad7b-a4adeae0390a",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "fdefa004-133d-4f7c-95c1-489bca75b885",
                            Name = "Editor"
                        });
                });

            modelBuilder.Entity("Entity.Concrete.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d65cd3dc-3c99-47c8-9934-82cba07395f4",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USERADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEG4pvXRq8U8SmyQwhZsg6kvpbry7/mN+nElptbtKjmr9WOQGF2H0q4/OUN4mIrc30A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "UserAdmin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9649986-2e18-4c3e-ab7b-e63767b941a2",
                            Email = "editor@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USEREDITOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEG4pvXRq8U8SmyQwhZsg6kvpbry7/mN+nElptbtKjmr9WOQGF2H0q4/OUN4mIrc30A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "UserEditor"
                        });
                });

            modelBuilder.Entity("Entity.Concrete.HatSatis", b =>
                {
                    b.Property<int>("HatSatisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HatSatisId"), 1L, 1);

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EPosta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HatAcilisTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int>("HatId")
                        .HasColumnType("int");

                    b.Property<byte>("HatOnayDurumu")
                        .HasColumnType("tinyint");

                    b.Property<int>("Il")
                        .HasColumnType("int");

                    b.Property<int>("Ilce")
                        .HasColumnType("int");

                    b.Property<string>("Soyad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HatSatisId");

                    b.HasIndex("HatId");

                    b.ToTable("HatSatis");
                });

            modelBuilder.Entity("Entity.Concrete.Il", b =>
                {
                    b.Property<int>("IlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IlId"), 1L, 1);

                    b.Property<string>("IlAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IlId");

                    b.ToTable("Il");

                    b.HasData(
                        new
                        {
                            IlId = 1,
                            IlAdi = "ANKARA"
                        },
                        new
                        {
                            IlId = 2,
                            IlAdi = "İSTANBUL"
                        });
                });

            modelBuilder.Entity("Entity.Concrete.Ilce", b =>
                {
                    b.Property<int>("IlceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IlceId"), 1L, 1);

                    b.Property<int>("IlId")
                        .HasColumnType("int");

                    b.Property<string>("IlceAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IlceId");

                    b.HasIndex("IlId");

                    b.ToTable("Ilce");

                    b.HasData(
                        new
                        {
                            IlceId = 1,
                            IlId = 1,
                            IlceAdi = "AKYURT"
                        },
                        new
                        {
                            IlceId = 2,
                            IlId = 1,
                            IlceAdi = "ALTINDAĞ"
                        },
                        new
                        {
                            IlceId = 3,
                            IlId = 1,
                            IlceAdi = "AYAŞ"
                        },
                        new
                        {
                            IlceId = 4,
                            IlId = 1,
                            IlceAdi = "BALA"
                        },
                        new
                        {
                            IlceId = 5,
                            IlId = 1,
                            IlceAdi = "BEYPAZARI"
                        },
                        new
                        {
                            IlceId = 6,
                            IlId = 1,
                            IlceAdi = "ÇAMLIDERE"
                        },
                        new
                        {
                            IlceId = 7,
                            IlId = 1,
                            IlceAdi = "ÇANKAYA"
                        },
                        new
                        {
                            IlceId = 8,
                            IlId = 1,
                            IlceAdi = "ÇUBUK"
                        },
                        new
                        {
                            IlceId = 9,
                            IlId = 1,
                            IlceAdi = "ELMADAĞ"
                        },
                        new
                        {
                            IlceId = 10,
                            IlId = 1,
                            IlceAdi = "ETİMESGUT"
                        },
                        new
                        {
                            IlceId = 11,
                            IlId = 1,
                            IlceAdi = "EVREN"
                        },
                        new
                        {
                            IlceId = 12,
                            IlId = 1,
                            IlceAdi = "GÖLBAŞI"
                        },
                        new
                        {
                            IlceId = 13,
                            IlId = 1,
                            IlceAdi = "GÜDÜL"
                        },
                        new
                        {
                            IlceId = 14,
                            IlId = 1,
                            IlceAdi = "HAYMANA"
                        },
                        new
                        {
                            IlceId = 15,
                            IlId = 1,
                            IlceAdi = "KAHRAMANKAZAN"
                        },
                        new
                        {
                            IlceId = 16,
                            IlId = 1,
                            IlceAdi = "KALECİK"
                        },
                        new
                        {
                            IlceId = 17,
                            IlId = 1,
                            IlceAdi = "KEÇİÖREN"
                        },
                        new
                        {
                            IlceId = 18,
                            IlId = 1,
                            IlceAdi = "KIZILCAHAMAM"
                        },
                        new
                        {
                            IlceId = 19,
                            IlId = 1,
                            IlceAdi = "MAMAK"
                        },
                        new
                        {
                            IlceId = 20,
                            IlId = 1,
                            IlceAdi = "NALLIHAN"
                        },
                        new
                        {
                            IlceId = 21,
                            IlId = 1,
                            IlceAdi = "POLATLI"
                        },
                        new
                        {
                            IlceId = 22,
                            IlId = 1,
                            IlceAdi = "PURSAKLAR"
                        },
                        new
                        {
                            IlceId = 23,
                            IlId = 1,
                            IlceAdi = "SİNCAN"
                        },
                        new
                        {
                            IlceId = 24,
                            IlId = 1,
                            IlceAdi = "ŞEREFLİKOÇHİSAR"
                        },
                        new
                        {
                            IlceId = 25,
                            IlId = 1,
                            IlceAdi = "YENİMAHALLE"
                        },
                        new
                        {
                            IlceId = 26,
                            IlId = 2,
                            IlceAdi = "ADALAR"
                        },
                        new
                        {
                            IlceId = 27,
                            IlId = 2,
                            IlceAdi = "ARNAVUTKÖY"
                        },
                        new
                        {
                            IlceId = 28,
                            IlId = 2,
                            IlceAdi = "ATAŞEHİR"
                        },
                        new
                        {
                            IlceId = 29,
                            IlId = 2,
                            IlceAdi = "AVCILAR"
                        },
                        new
                        {
                            IlceId = 30,
                            IlId = 2,
                            IlceAdi = "BAĞCILAR"
                        },
                        new
                        {
                            IlceId = 31,
                            IlId = 2,
                            IlceAdi = "BAHÇELİEVLER"
                        },
                        new
                        {
                            IlceId = 32,
                            IlId = 2,
                            IlceAdi = "BAKIRKÖY"
                        },
                        new
                        {
                            IlceId = 33,
                            IlId = 2,
                            IlceAdi = "BAŞAKŞEHİR"
                        },
                        new
                        {
                            IlceId = 34,
                            IlId = 2,
                            IlceAdi = "BAYRAMPAŞA"
                        },
                        new
                        {
                            IlceId = 35,
                            IlId = 2,
                            IlceAdi = "BEŞİKTAŞ"
                        },
                        new
                        {
                            IlceId = 36,
                            IlId = 2,
                            IlceAdi = "BEYKOZ"
                        },
                        new
                        {
                            IlceId = 37,
                            IlId = 2,
                            IlceAdi = "BEYOĞLU"
                        },
                        new
                        {
                            IlceId = 38,
                            IlId = 2,
                            IlceAdi = "BÜYÜKÇEKMECE"
                        },
                        new
                        {
                            IlceId = 39,
                            IlId = 2,
                            IlceAdi = "ÇATALCA"
                        },
                        new
                        {
                            IlceId = 40,
                            IlId = 2,
                            IlceAdi = "ÇEKMEKÖY"
                        },
                        new
                        {
                            IlceId = 41,
                            IlId = 2,
                            IlceAdi = "ESENLER"
                        },
                        new
                        {
                            IlceId = 42,
                            IlId = 2,
                            IlceAdi = "ESENYURT"
                        },
                        new
                        {
                            IlceId = 43,
                            IlId = 2,
                            IlceAdi = "EYÜPSULTAN"
                        },
                        new
                        {
                            IlceId = 44,
                            IlId = 2,
                            IlceAdi = "FATİH"
                        },
                        new
                        {
                            IlceId = 45,
                            IlId = 2,
                            IlceAdi = "GAZİOSMANPAŞA"
                        },
                        new
                        {
                            IlceId = 46,
                            IlId = 2,
                            IlceAdi = "GÜNGÖREN"
                        },
                        new
                        {
                            IlceId = 47,
                            IlId = 2,
                            IlceAdi = "KADIKÖY"
                        },
                        new
                        {
                            IlceId = 48,
                            IlId = 2,
                            IlceAdi = "KAĞITHANE"
                        },
                        new
                        {
                            IlceId = 49,
                            IlId = 2,
                            IlceAdi = "KARTAL"
                        },
                        new
                        {
                            IlceId = 50,
                            IlId = 2,
                            IlceAdi = "KÜÇÜKÇEKMECE"
                        },
                        new
                        {
                            IlceId = 51,
                            IlId = 2,
                            IlceAdi = "MALTEPE"
                        },
                        new
                        {
                            IlceId = 52,
                            IlId = 2,
                            IlceAdi = "PENDİK"
                        },
                        new
                        {
                            IlceId = 53,
                            IlId = 2,
                            IlceAdi = "SANCAKTEPE"
                        },
                        new
                        {
                            IlceId = 54,
                            IlId = 2,
                            IlceAdi = "SARIYER"
                        },
                        new
                        {
                            IlceId = 55,
                            IlId = 2,
                            IlceAdi = "SİLİVRİ"
                        },
                        new
                        {
                            IlceId = 56,
                            IlId = 2,
                            IlceAdi = "SULTANBEYLİ"
                        },
                        new
                        {
                            IlceId = 57,
                            IlId = 2,
                            IlceAdi = "SULTANGAZİ"
                        },
                        new
                        {
                            IlceId = 58,
                            IlId = 2,
                            IlceAdi = "ŞİLE"
                        },
                        new
                        {
                            IlceId = 59,
                            IlId = 2,
                            IlceAdi = "ŞİŞLİ"
                        },
                        new
                        {
                            IlceId = 60,
                            IlId = 2,
                            IlceAdi = "TUZLA"
                        },
                        new
                        {
                            IlceId = 61,
                            IlId = 2,
                            IlceAdi = "ÜMRANİYE"
                        },
                        new
                        {
                            IlceId = 62,
                            IlId = 2,
                            IlceAdi = "ÜSKÜDAR"
                        },
                        new
                        {
                            IlceId = 63,
                            IlId = 2,
                            IlceAdi = "ZEYTİNBURNU"
                        });
                });

            modelBuilder.Entity("Entity.Hat", b =>
                {
                    b.Property<int>("Hat_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Hat_Id"), 1L, 1);

                    b.Property<byte>("SatisDurumu")
                        .HasColumnType("tinyint");

                    b.Property<string>("TelefonNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Hat_Id");

                    b.ToTable("Hats");
                });

            modelBuilder.Entity("Entity.HatKullanim", b =>
                {
                    b.Property<int>("HatKullanimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HatKullanimId"), 1L, 1);

                    b.Property<int>("HatId")
                        .HasColumnType("int");

                    b.Property<int>("KonusmaSuresi")
                        .HasColumnType("int");

                    b.Property<int>("Tutar")
                        .HasColumnType("int");

                    b.HasKey("HatKullanimId");

                    b.HasIndex("HatId");

                    b.ToTable("HatKullanims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entity.Concrete.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                    b.HasDiscriminator().HasValue("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Entity.Concrete.HatSatis", b =>
                {
                    b.HasOne("Entity.Hat", "Hat")
                        .WithMany("HatSatis")
                        .HasForeignKey("HatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hat");
                });

            modelBuilder.Entity("Entity.Concrete.Ilce", b =>
                {
                    b.HasOne("Entity.Concrete.Il", "Il")
                        .WithMany("Ilceler")
                        .HasForeignKey("IlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Il");
                });

            modelBuilder.Entity("Entity.HatKullanim", b =>
                {
                    b.HasOne("Entity.Hat", "Hat")
                        .WithMany("HatKullanims")
                        .HasForeignKey("HatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hat");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Entity.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Entity.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.Concrete.Il", b =>
                {
                    b.Navigation("Ilceler");
                });

            modelBuilder.Entity("Entity.Hat", b =>
                {
                    b.Navigation("HatKullanims");

                    b.Navigation("HatSatis");
                });
#pragma warning restore 612, 618
        }
    }
}
